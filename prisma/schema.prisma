generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  rtis          RTI[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RTI {
  id               String           @id @default(cuid())
  userId           String
  content          String           @db.Text
  department       String
  departmentId     String?
  subject          String?
  language         String          @default("en")
  templateId       String?
  status           RTIStatus       @default(DRAFT)
  applicantDetails Json?
  attachments      Attachment[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Attachment {
  id        String   @id @default(cuid())
  rtiId     String
  name      String
  url       String
  type      String
  size      Int
  createdAt DateTime @default(now())
  rti       RTI      @relation(fields: [rtiId], references: [id], onDelete: Cascade)
}

enum RTIStatus {
  DRAFT
  SUBMITTED
  PENDING
  RESPONDED
  REJECTED
  CLOSED
} 